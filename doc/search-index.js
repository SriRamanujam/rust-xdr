var searchIndex = {};
searchIndex["xdr_codec"] = {"doc":"XDR runtime encoding/decoding","items":[[8,"Write","xdr_codec","A trait for objects which are byte-oriented sinks.",null,null],[10,"write","","Write a buffer into this object, returning how many bytes were written.",0,null],[10,"flush","","Flush this output stream, ensuring that all intermediately buffered\ncontents reach their destination.",0,{"inputs":[{"name":"write"}],"output":{"name":"result"}}],[11,"write_all","","Attempts to write an entire buffer into this write.",0,null],[11,"write_fmt","","Writes a formatted string into this writer, returning any error\nencountered.",0,{"inputs":[{"name":"write"},{"name":"arguments"}],"output":{"name":"result"}}],[11,"by_ref","","Creates a &quot;by reference&quot; adaptor for this instance of `Write`.",0,{"inputs":[{"name":"write"}],"output":{"name":"self"}}],[11,"broadcast","","Creates a new writer which will write all data to both this writer and\nanother writer.",0,{"inputs":[{"name":"write"},{"name":"w"}],"output":{"name":"broadcast"}}],[8,"Read","","The `Read` trait allows for reading bytes from a source.",null,null],[10,"read","","Pull some bytes from this source into the specified buffer, returning\nhow many bytes were read.",1,null],[11,"read_to_end","","Read all bytes until EOF in this source, placing them into `buf`.",1,{"inputs":[{"name":"read"},{"name":"vec"}],"output":{"name":"result"}}],[11,"read_to_string","","Read all bytes until EOF in this source, placing them into `buf`.",1,{"inputs":[{"name":"read"},{"name":"string"}],"output":{"name":"result"}}],[11,"read_exact","","Read the exact number of bytes required to fill `buf`.",1,null],[11,"by_ref","","Creates a &quot;by reference&quot; adaptor for this instance of `Read`.",1,{"inputs":[{"name":"read"}],"output":{"name":"self"}}],[11,"bytes","","Transforms this `Read` instance to an `Iterator` over its bytes.",1,{"inputs":[{"name":"read"}],"output":{"name":"bytes"}}],[11,"chars","","Transforms this `Read` instance to an `Iterator` over `char`s.",1,{"inputs":[{"name":"read"}],"output":{"name":"chars"}}],[11,"chain","","Creates an adaptor which will chain this stream with another.",1,{"inputs":[{"name":"read"},{"name":"r"}],"output":{"name":"chain"}}],[11,"take","","Creates an adaptor which will read at most `limit` bytes from it.",1,{"inputs":[{"name":"read"},{"name":"u64"}],"output":{"name":"take"}}],[11,"tee","","Creates a reader adaptor which will write all read data into the given\noutput stream.",1,{"inputs":[{"name":"read"},{"name":"w"}],"output":{"name":"tee"}}],[4,"Error","","XDR errors",null,null],[13,"Byteorder","","Byte order packing problem - generally a premature EOF.",2,null],[13,"IOError","","An underlying IO error.",2,null],[13,"InvalidUtf8","","An improperly encoded String.",2,null],[13,"InvalidCase","","Encoding discriminated union with a bad (default) case.",2,null],[13,"InvalidEnum","","Decoding a bad enum value",2,null],[13,"InvalidLen","","Array/String too long",2,null],[13,"Generic","","Generic error.",2,null],[5,"padding","","XDR padding",null,null],[5,"pack","","Serialization (packing) helper.",null,{"inputs":[{"name":"t"},{"name":"out"}],"output":{"name":"result"}}],[5,"pack_array","","Pack a fixed-size array.",null,null],[5,"unpack_flex_array","","Unpack a length-limited array",null,{"inputs":[{"name":"in"},{"name":"usize"}],"output":{"name":"result"}}],[5,"unpack_string","","Unpack length-limited string",null,{"inputs":[{"name":"in"},{"name":"usize"}],"output":{"name":"result"}}],[5,"unpack","","Deserialization (unpacking) helper function",null,{"inputs":[{"name":"in"}],"output":{"name":"result"}}],[0,"record","","XDR record marking",null,null],[3,"XdrRecordReader","xdr_codec::record","Read records from a bytestream.",null,null],[3,"XdrRecordReaderIter","","Iterator over records in the stream.",null,null],[3,"XdrRecordWriter","","Write records into a bytestream.",null,null],[11,"fmt","","",3,{"inputs":[{"name":"xdrrecordreader"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Wrapper a record reader around an existing implementation of\n`BufRead`, such as `BufReader`.",3,{"inputs":[{"name":"r"}],"output":{"name":"xdrrecordreader"}}],[11,"eor","","Current fragment is the end of the record.",3,{"inputs":[{"name":"xdrrecordreader"}],"output":{"name":"bool"}}],[11,"read","","",3,null],[11,"fill_buf","","",3,{"inputs":[{"name":"xdrrecordreader"}],"output":{"name":"result"}}],[11,"consume","","",3,{"inputs":[{"name":"xdrrecordreader"},{"name":"usize"}],"output":null}],[11,"into_iter","","",3,{"inputs":[{"name":"xdrrecordreader"}],"output":{"name":"intoiter"}}],[11,"fmt","","",4,{"inputs":[{"name":"xdrrecordreaderiter"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",4,{"inputs":[{"name":"xdrrecordreaderiter"}],"output":{"name":"option"}}],[11,"new","","Create a new `XdrRecordWriter` wrapped around a `Write`\nimplementation, using a default buffer size (64k).",5,{"inputs":[{"name":"w"}],"output":{"name":"xdrrecordwriter"}}],[11,"with_buffer","","Create an instance with a specific buffer size. Panics if the\nsize is zero.",5,{"inputs":[{"name":"w"},{"name":"usize"}],"output":{"name":"xdrrecordwriter"}}],[11,"flush_eor","","Flush the current buffer. If `eor` is true, the end of record\nmarker is set.",5,{"inputs":[{"name":"xdrrecordwriter"},{"name":"bool"}],"output":{"name":"result"}}],[11,"drop","","",5,{"inputs":[{"name":"xdrrecordwriter"}],"output":null}],[11,"write","","",5,null],[11,"flush","","",5,{"inputs":[{"name":"xdrrecordwriter"}],"output":{"name":"result"}}],[6,"Result","xdr_codec","A wrapper around `std::result::Result` where errors are all `xdr_codec::Error`.",null,null],[8,"Pack","","Basic packing trait.",null,null],[10,"pack","","",6,{"inputs":[{"name":"pack"},{"name":"out"}],"output":{"name":"result"}}],[8,"Unpack","","Basic unpacking trait",null,null],[10,"unpack","","",7,{"inputs":[{"name":"in"}],"output":{"name":"result"}}],[11,"fmt","","",2,{"inputs":[{"name":"error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"invalidcase","","",2,{"inputs":[],"output":{"name":"error"}}],[11,"invalidenum","","",2,{"inputs":[],"output":{"name":"error"}}],[11,"invalidlen","","",2,{"inputs":[],"output":{"name":"error"}}],[11,"badutf8","","",2,{"inputs":[{"name":"fromutf8error"}],"output":{"name":"error"}}],[11,"byteorder","","",2,{"inputs":[{"name":"error"}],"output":{"name":"error"}}],[11,"generic","","",2,{"inputs":[{"name":"t"}],"output":{"name":"error"}}],[11,"from","","",2,{"inputs":[{"name":"string"}],"output":{"name":"self"}}],[11,"from","","",2,{"inputs":[{"name":"error"}],"output":{"name":"self"}}],[11,"from","","",2,{"inputs":[{"name":"str"}],"output":{"name":"self"}}],[11,"from","","",2,{"inputs":[{"name":"fromutf8error"}],"output":{"name":"self"}}],[11,"from","","",2,{"inputs":[{"name":"error"}],"output":{"name":"self"}}],[11,"description","","",2,{"inputs":[{"name":"error"}],"output":{"name":"str"}}],[11,"cause","","",2,{"inputs":[{"name":"error"}],"output":{"name":"option"}}],[11,"fmt","","",2,{"inputs":[{"name":"error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"pack","collections::vec","",8,{"inputs":[{"name":"vec"},{"name":"out"}],"output":{"name":"result"}}],[11,"pack","core::option","",9,{"inputs":[{"name":"option"},{"name":"out"}],"output":{"name":"result"}}],[11,"pack","alloc::boxed","",10,{"inputs":[{"name":"box"},{"name":"out"}],"output":{"name":"result"}}],[11,"pack","collections::borrow","",11,{"inputs":[{"name":"cow"},{"name":"out"}],"output":{"name":"result"}}],[11,"unpack","collections::vec","",8,{"inputs":[{"name":"in"}],"output":{"name":"result"}}],[11,"unpack","collections::string","",12,{"inputs":[{"name":"in"}],"output":{"name":"result"}}],[11,"unpack","core::option","",9,{"inputs":[{"name":"in"}],"output":{"name":"result"}}],[11,"unpack","alloc::boxed","",10,{"inputs":[{"name":"in"}],"output":{"name":"result"}}],[11,"unpack","collections::borrow","",11,{"inputs":[{"name":"in"}],"output":{"name":"result"}}]],"paths":[[8,"Write"],[8,"Read"],[4,"Error"],[3,"XdrRecordReader"],[3,"XdrRecordReaderIter"],[3,"XdrRecordWriter"],[8,"Pack"],[8,"Unpack"],[3,"Vec"],[4,"Option"],[3,"Box"],[4,"Cow"],[3,"String"]]};
initSearch(searchIndex);
